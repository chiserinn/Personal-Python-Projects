#Object Oriented Programming Notes

# Object

class Dog: (CLASS)
  name = "Erin" (IDENTITY - unique key)
  type = "poodle" (STATE - attributes, variables)
  def bite(): (BEHAVIOUR - method)
    pass

obj = Dog() (OBJECT)

def __init__ (self,name):
   self.name = name
creates an instance method(called everytime Dog() is called) -> to initialise the object(self) and argument(name) to take the attribute (name)

# Inheritance

class Dog():
class Poodle(Dog):
class Baby_Poodle (Poodle):
each subsequent class takes the methods and attributes

#Polymorphism 

class Dog():
def fight():
  print ("Ruff")
class Poodle(Dog):
def fight():
  print ("RRRUFF")
each subsequent class can override existing methods

# Encapsulation

class Dog():
def __init__() -> "____" Privated, cannot access/change variables, will raise attribute error when accessed(printed)

#######################################################################

#OOP is about creating custom data types => student data type
